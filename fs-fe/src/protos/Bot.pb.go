// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Bot.proto

package Bot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Client_App int32

const (
	Client_INSTAGRAM Client_App = 0
	Client_REDDIT    Client_App = 1
	Client_GMAIL     Client_App = 2
	Client_FACEBOOK  Client_App = 3
	Client_TWITTER   Client_App = 4
)

var Client_App_name = map[int32]string{
	0: "INSTAGRAM",
	1: "REDDIT",
	2: "GMAIL",
	3: "FACEBOOK",
	4: "TWITTER",
}
var Client_App_value = map[string]int32{
	"INSTAGRAM": 0,
	"REDDIT":    1,
	"GMAIL":     2,
	"FACEBOOK":  3,
	"TWITTER":   4,
}

func (x Client_App) String() string {
	return proto.EnumName(Client_App_name, int32(x))
}
func (Client_App) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{1, 0}
}

// Media options
type Thread_Type int32

const (
	Thread_VIDEO Thread_Type = 0
	Thread_IMAGE Thread_Type = 1
	Thread_TEXT  Thread_Type = 2
	Thread_AUDIO Thread_Type = 3
)

var Thread_Type_name = map[int32]string{
	0: "VIDEO",
	1: "IMAGE",
	2: "TEXT",
	3: "AUDIO",
}
var Thread_Type_value = map[string]int32{
	"VIDEO": 0,
	"IMAGE": 1,
	"TEXT":  2,
	"AUDIO": 3,
}

func (x Thread_Type) String() string {
	return proto.EnumName(Thread_Type_name, int32(x))
}
func (Thread_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{2, 0}
}

// Application specific user credentials
type User struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=accessToken" json:"accessToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

// Describes the clinet by specifying the application agent
type Client struct {
	User                 *User      `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Agent                Client_App `protobuf:"varint,2,opt,name=agent,enum=Bot.Client_App" json:"agent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{1}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (dst *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(dst, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Client) GetAgent() Client_App {
	if m != nil {
		return m.Agent
	}
	return Client_INSTAGRAM
}

// Represents a single thread
type Thread struct {
	Id                   string               `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Owner                *Client              `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	CreatedTime          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=createdTime" json:"createdTime,omitempty"`
	CommentCount         int32                `protobuf:"varint,5,opt,name=commentCount" json:"commentCount,omitempty"`
	Type                 Thread_Type          `protobuf:"varint,6,opt,name=type,enum=Bot.Thread_Type" json:"type,omitempty"`
	Url                  string               `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{2}
}
func (m *Thread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thread.Unmarshal(m, b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
}
func (dst *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(dst, src)
}
func (m *Thread) XXX_Size() int {
	return xxx_messageInfo_Thread.Size(m)
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Thread) GetOwner() *Client {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Thread) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Thread) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *Thread) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *Thread) GetType() Thread_Type {
	if m != nil {
		return m.Type
	}
	return Thread_VIDEO
}

func (m *Thread) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Represents a collection of threads
type GetClientThreadsResponse struct {
	Threads              []*Thread `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetClientThreadsResponse) Reset()         { *m = GetClientThreadsResponse{} }
func (m *GetClientThreadsResponse) String() string { return proto.CompactTextString(m) }
func (*GetClientThreadsResponse) ProtoMessage()    {}
func (*GetClientThreadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{3}
}
func (m *GetClientThreadsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClientThreadsResponse.Unmarshal(m, b)
}
func (m *GetClientThreadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClientThreadsResponse.Marshal(b, m, deterministic)
}
func (dst *GetClientThreadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientThreadsResponse.Merge(dst, src)
}
func (m *GetClientThreadsResponse) XXX_Size() int {
	return xxx_messageInfo_GetClientThreadsResponse.Size(m)
}
func (m *GetClientThreadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientThreadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientThreadsResponse proto.InternalMessageInfo

func (m *GetClientThreadsResponse) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

// Represents a single comment
type Comment struct {
	CommentId            string               `protobuf:"bytes,1,opt,name=commentId" json:"commentId,omitempty"`
	Text                 string               `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Owner                string               `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	CreatedTime          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=createdTime" json:"createdTime,omitempty"`
	Thread               *Thread              `protobuf:"bytes,5,opt,name=thread" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{4}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (dst *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(dst, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Comment) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Comment) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *Comment) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

// Represents a collection of all the comments in a Thread
type GetThreadCommentsResponse struct {
	Comments             []*Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetThreadCommentsResponse) Reset()         { *m = GetThreadCommentsResponse{} }
func (m *GetThreadCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetThreadCommentsResponse) ProtoMessage()    {}
func (*GetThreadCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_Bot_8057a65e91f52d7e, []int{5}
}
func (m *GetThreadCommentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetThreadCommentsResponse.Unmarshal(m, b)
}
func (m *GetThreadCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetThreadCommentsResponse.Marshal(b, m, deterministic)
}
func (dst *GetThreadCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThreadCommentsResponse.Merge(dst, src)
}
func (m *GetThreadCommentsResponse) XXX_Size() int {
	return xxx_messageInfo_GetThreadCommentsResponse.Size(m)
}
func (m *GetThreadCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThreadCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetThreadCommentsResponse proto.InternalMessageInfo

func (m *GetThreadCommentsResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "Bot.User")
	proto.RegisterType((*Client)(nil), "Bot.Client")
	proto.RegisterType((*Thread)(nil), "Bot.Thread")
	proto.RegisterType((*GetClientThreadsResponse)(nil), "Bot.GetClientThreadsResponse")
	proto.RegisterType((*Comment)(nil), "Bot.Comment")
	proto.RegisterType((*GetThreadCommentsResponse)(nil), "Bot.GetThreadCommentsResponse")
	proto.RegisterEnum("Bot.Client_App", Client_App_name, Client_App_value)
	proto.RegisterEnum("Bot.Thread_Type", Thread_Type_name, Thread_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppBotClient is the client API for AppBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppBotClient interface {
	// Given a Client, returns a collection of recent threads
	GetClientThreads(ctx context.Context, in *Client, opts ...grpc.CallOption) (*GetClientThreadsResponse, error)
	// Given a Thread, returns all the comments from that thread
	GetThreadComments(ctx context.Context, in *Thread, opts ...grpc.CallOption) (*GetThreadCommentsResponse, error)
}

type appBotClient struct {
	cc *grpc.ClientConn
}

func NewAppBotClient(cc *grpc.ClientConn) AppBotClient {
	return &appBotClient{cc}
}

func (c *appBotClient) GetClientThreads(ctx context.Context, in *Client, opts ...grpc.CallOption) (*GetClientThreadsResponse, error) {
	out := new(GetClientThreadsResponse)
	err := c.cc.Invoke(ctx, "/Bot.AppBot/GetClientThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appBotClient) GetThreadComments(ctx context.Context, in *Thread, opts ...grpc.CallOption) (*GetThreadCommentsResponse, error) {
	out := new(GetThreadCommentsResponse)
	err := c.cc.Invoke(ctx, "/Bot.AppBot/GetThreadComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppBotServer is the server API for AppBot service.
type AppBotServer interface {
	// Given a Client, returns a collection of recent threads
	GetClientThreads(context.Context, *Client) (*GetClientThreadsResponse, error)
	// Given a Thread, returns all the comments from that thread
	GetThreadComments(context.Context, *Thread) (*GetThreadCommentsResponse, error)
}

func RegisterAppBotServer(s *grpc.Server, srv AppBotServer) {
	s.RegisterService(&_AppBot_serviceDesc, srv)
}

func _AppBot_GetClientThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppBotServer).GetClientThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bot.AppBot/GetClientThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppBotServer).GetClientThreads(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppBot_GetThreadComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppBotServer).GetThreadComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bot.AppBot/GetThreadComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppBotServer).GetThreadComments(ctx, req.(*Thread))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppBot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bot.AppBot",
	HandlerType: (*AppBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientThreads",
			Handler:    _AppBot_GetClientThreads_Handler,
		},
		{
			MethodName: "GetThreadComments",
			Handler:    _AppBot_GetThreadComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Bot.proto",
}

func init() { proto.RegisterFile("Bot.proto", fileDescriptor_Bot_8057a65e91f52d7e) }

var fileDescriptor_Bot_8057a65e91f52d7e = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0xe9, 0x5f, 0xe8, 0x5b, 0x5c, 0xc7, 0x37, 0xc6, 0x54, 0xe2, 0x2a, 0x56, 0x37, 0xe1,
	0xd4, 0x8d, 0x78, 0xf5, 0xb0, 0x05, 0xba, 0xa4, 0x51, 0x24, 0x19, 0x67, 0xd5, 0x2b, 0x0b, 0x23,
	0x12, 0xa1, 0xd3, 0xb4, 0x43, 0x74, 0xbf, 0x84, 0x47, 0x8f, 0x7e, 0x0a, 0x3f, 0xa0, 0xe9, 0x4c,
	0x61, 0x71, 0xd5, 0xd3, 0xde, 0x66, 0x9e, 0x67, 0xe6, 0xed, 0xf3, 0xfc, 0x3a, 0xe0, 0x0d, 0x84,
	0x8c, 0xf2, 0x42, 0x48, 0x81, 0xd6, 0x40, 0xc8, 0xce, 0x93, 0xa5, 0x10, 0xcb, 0x35, 0x3f, 0x55,
	0xd2, 0xe5, 0xf6, 0xd3, 0xa9, 0x5c, 0x6d, 0x78, 0x29, 0x67, 0x9b, 0x5c, 0x9f, 0x0a, 0xcf, 0xc0,
	0xbe, 0x28, 0x79, 0x81, 0x0f, 0xc0, 0xdd, 0x96, 0xbc, 0x48, 0x17, 0x81, 0xd1, 0x35, 0x7a, 0x1e,
	0xad, 0x77, 0xd8, 0x05, 0x7f, 0x36, 0x9f, 0xf3, 0xb2, 0x64, 0xe2, 0x0b, 0xcf, 0x02, 0x53, 0x99,
	0x87, 0x52, 0xf8, 0xc3, 0x00, 0x77, 0xb8, 0x5e, 0xf1, 0x4c, 0xe2, 0x31, 0xd8, 0xd5, 0x35, 0x35,
	0xc2, 0xef, 0x7b, 0x51, 0x15, 0xa6, 0x9a, 0x4e, 0x95, 0x8c, 0x27, 0xe0, 0xcc, 0x96, 0x3c, 0x93,
	0x6a, 0xca, 0x51, 0xff, 0xae, 0xf2, 0xf5, 0xd5, 0x28, 0xce, 0x73, 0xaa, 0xdd, 0xf0, 0x1c, 0xac,
	0x38, 0xcf, 0xf1, 0x0e, 0x78, 0xe9, 0xdb, 0x77, 0x2c, 0x1e, 0xd3, 0x78, 0x42, 0x1a, 0x08, 0xe0,
	0xd2, 0x64, 0x34, 0x4a, 0x19, 0x31, 0xd0, 0x03, 0x67, 0x3c, 0x89, 0xd3, 0x37, 0xc4, 0xc4, 0x36,
	0xb4, 0xce, 0xe3, 0x61, 0x32, 0x98, 0x4e, 0x5f, 0x13, 0x0b, 0x7d, 0x68, 0xb2, 0x0f, 0x29, 0x63,
	0x09, 0x25, 0x76, 0xf8, 0xd3, 0x04, 0x97, 0x7d, 0x2e, 0xf8, 0x6c, 0x81, 0x47, 0x60, 0xee, 0x9b,
	0x99, 0xe9, 0x02, 0x9f, 0x82, 0x23, 0xbe, 0x66, 0xbc, 0x50, 0x49, 0xfc, 0xbe, 0x7f, 0x90, 0x84,
	0x6a, 0x07, 0xef, 0x83, 0x23, 0x57, 0x72, 0xcd, 0x03, 0x4b, 0xdd, 0xd2, 0x1b, 0x7c, 0x05, 0xfe,
	0xbc, 0xe0, 0x33, 0xc9, 0x17, 0x6c, 0xb5, 0xe1, 0x81, 0xad, 0xae, 0x77, 0x22, 0x4d, 0x39, 0xda,
	0x51, 0x8e, 0xd8, 0x8e, 0x32, 0x3d, 0x3c, 0x8e, 0x21, 0xb4, 0xe7, 0x62, 0xb3, 0xe1, 0x99, 0x1c,
	0x8a, 0x6d, 0x26, 0x03, 0xa7, 0x6b, 0xf4, 0x1c, 0xfa, 0x87, 0x86, 0xcf, 0xc1, 0x96, 0x57, 0x39,
	0x0f, 0x5c, 0xc5, 0x88, 0xa8, 0x64, 0xba, 0x45, 0xc4, 0xae, 0x72, 0x4e, 0x95, 0x8b, 0x04, 0xac,
	0x6d, 0xb1, 0x0e, 0x9a, 0x2a, 0x5b, 0xb5, 0x0c, 0x5f, 0x80, 0x5d, 0xf9, 0x15, 0x9b, 0xf7, 0xe9,
	0x28, 0x99, 0x92, 0x46, 0xb5, 0x4c, 0x27, 0xf1, 0x38, 0x21, 0x06, 0xb6, 0xc0, 0x66, 0xc9, 0x47,
	0x46, 0xcc, 0x4a, 0x8c, 0x2f, 0x46, 0xe9, 0x94, 0x58, 0x61, 0x0c, 0xc1, 0x98, 0x4b, 0x5d, 0x5b,
	0x7f, 0xa2, 0xa4, 0xbc, 0xcc, 0x45, 0x56, 0x72, 0x3c, 0x81, 0xa6, 0xd4, 0x52, 0x60, 0x74, 0xad,
	0x3d, 0x23, 0x7d, 0x8c, 0xee, 0xbc, 0xf0, 0x97, 0x01, 0xcd, 0xa1, 0x8e, 0x8f, 0x8f, 0xc0, 0xab,
	0x9b, 0xec, 0x59, 0x5f, 0x0b, 0x88, 0x60, 0x4b, 0xfe, 0x4d, 0xd6, 0x2f, 0x48, 0xad, 0x2b, 0xc6,
	0xfa, 0x37, 0xd4, 0x8c, 0x35, 0xf9, 0xdb, 0x31, 0x7e, 0x06, 0xae, 0x0e, 0xa7, 0xe8, 0xde, 0xc8,
	0x5d, 0x5b, 0x61, 0x02, 0x0f, 0xc7, 0xbc, 0xee, 0x5c, 0xc7, 0xbf, 0xae, 0xde, 0x83, 0x56, 0x1d,
	0x7b, 0xd7, 0xbd, 0xad, 0xdf, 0x87, 0x16, 0xe9, 0xde, 0xed, 0x7f, 0x37, 0xc0, 0x8d, 0xf3, 0x7c,
	0x20, 0x24, 0x9e, 0x01, 0xb9, 0xc9, 0x12, 0x0f, 0x9f, 0x55, 0xe7, 0x58, 0x6d, 0xfe, 0xc7, 0x3b,
	0x6c, 0xe0, 0x00, 0xee, 0xfd, 0x95, 0x09, 0x0f, 0xd3, 0x77, 0x1e, 0xef, 0x46, 0xfc, 0x3b, 0x78,
	0xd8, 0xb8, 0x74, 0x15, 0x9d, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x74, 0x5d, 0x71, 0x5f,
	0x07, 0x04, 0x00, 0x00,
}
